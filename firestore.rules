rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Kullanıcı belgeleri
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;

      // Kendi dokümanını güncelleyebilsin
      allow update: if request.auth != null && request.auth.uid == userId;

      // Takip ve arkadaşlık işlemleri için: 
      // Sadece 'followers', 'following', 'friends', 'friendRequests' alanları güncelleniyorsa
      allow update: if request.auth != null &&
        (
          // Takip işlemi: başkası seni takip edince
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) &&
            request.auth.uid in request.resource.data.followers)
          ||
          // Takipten çıkma: başkası seni takipten çıkarınca
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) &&
            resource.data.followers.hasAny([request.auth.uid]))
          ||
          // Takip işlemi: sen başkasını takip edince veya takipten çıkınca
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following']) &&
            request.auth.uid == userId)
          ||
          // Arkadaşlık isteği: başkası sana istek gönderince
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friendRequests']) &&
            request.auth.uid in request.resource.data.friendRequests)
          ||
          // Arkadaşlık: arkadaş ekleme/çıkarma (her iki taraf da ekleyebilsin/çıkarabilsin)
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
            (request.auth.uid == userId || request.auth.uid in request.resource.data.friends))
        );
    }

    // Sesli arama belgeleri (calls) - WebRTC signaling için optimize edildi
    match /calls/{callId} {
      // Sadece arama ile ilgili kullanıcılar okuyabilir/yazabilir
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.receiverId);
      // Yeni arama oluşturma - arayan kişi oluşturabilir
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.callerId;
      // WebRTC ICE candidate signaling
      match /candidates/{candidateId} {
        allow read, write: if request.auth != null &&
          (request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId ||
           request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.receiverId);
      }
    }

    // Voice calls collection - WebRTC audio stream için
    match /voice_calls/{callId} {
      // Call ID'de yer alan kullanıcılar okuyabilir/yazabilir
      allow read, write: if request.auth != null &&
        (request.auth.uid in callId.split('_') || 
         request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.receiverId);
      // Yeni voice call oluşturma
      allow create: if request.auth != null &&
        (request.auth.uid in callId.split('_') || 
         request.auth.uid == request.resource.data.callerId);
      // Audio stream subcollection
      match /audio_stream/{streamId} {
        allow read, write: if request.auth != null &&
          (request.auth.uid in callId.split('_') || 
           request.auth.uid == get(/databases/$(database)/documents/voice_calls/$(callId)).data.callerId ||
           request.auth.uid == get(/databases/$(database)/documents/voice_calls/$(callId)).data.receiverId);
      }
    }

    // Matching calls collection - Eşleştirme aramaları için
    match /matching_calls/{callId} {
      // Call ID'de yer alan kullanıcılar okuyabilir/yazabilir
      allow read, write: if request.auth != null &&
        (request.auth.uid in callId.split('_') || 
         request.auth.uid == resource.data.callerId || 
         request.auth.uid == resource.data.receiverId);
      // Yeni matching call oluşturma
      allow create: if request.auth != null &&
        (request.auth.uid in callId.split('_') || 
         request.auth.uid == request.resource.data.callerId);
      // ICE candidates subcollection
      match /candidates/{candidateId} {
        allow read, write: if request.auth != null &&
          (request.auth.uid in callId.split('_') || 
           request.auth.uid == get(/databases/$(database)/documents/matching_calls/$(callId)).data.callerId ||
           request.auth.uid == get(/databases/$(database)/documents/matching_calls/$(callId)).data.receiverId);
      }
    }

    // Mesaj belgeleri
    match /messages/{messageId} {
      allow get: if request.auth != null &&
        (request.auth.uid == resource.data.senderId ||
         request.auth.uid == resource.data.receiverId);
      allow list: if request.auth != null;
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.senderId ||
         request.auth.uid == resource.data.receiverId ||
         request.auth.uid in resource.data.participants) &&
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['isRead', 'deletedFor', 'text', 'edited', 'previousText'])
        );
      allow delete: if request.auth != null &&
        (request.auth.uid == resource.data.senderId ||
         request.auth.uid == resource.data.receiverId);
    }

    // Bildirimler (notifications) koleksiyonu
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }

    // Rastgele eşleşme kuyruğu (matching_queue) - Düzeltilmiş kurallar
    match /matching_queue/{uid} {
      // Kendi dokümanını okuyabilir/yazabilir/silebilir
      allow read, write, delete: if request.auth != null && request.auth.uid == uid;
      
      // Eşleşme için diğer kullanıcıların dokümanlarını okuyabilir (sadece matchedWith=null olanları)
      allow read: if request.auth != null && 
        resource.data.matchedWith == null && 
        request.auth.uid != uid;
        
      // Eşleşme tamamlandığında diğer kullanıcının dokümanını güncelleyebilir
      allow update: if request.auth != null && 
        request.auth.uid != uid && 
        request.resource.data.matchedWith == request.auth.uid;
    }
    
    // Matching queue collection için list erişimi (lastActivity filtresi ile)
    match /matching_queue/{document=**} {
      allow list: if request.auth != null;
    }
  }
} 