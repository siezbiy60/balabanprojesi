rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Kullanıcı belgeleri
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;

      // Kendi dokümanını güncelleyebilsin
      allow update: if request.auth != null && request.auth.uid == userId;

      // Takip ve arkadaşlık işlemleri için: 
      // Sadece 'followers', 'following', 'friends', 'friendRequests' alanları güncelleniyorsa
      allow update: if request.auth != null &&
        (
          // Takip işlemi: başkası seni takip edince
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) &&
            request.auth.uid in request.resource.data.followers)
          ||
          // Takipten çıkma: başkası seni takipten çıkarınca
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers']) &&
            resource.data.followers.hasAny([request.auth.uid]))
          ||
          // Takip işlemi: sen başkasını takip edince veya takipten çıkınca
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following']) &&
            request.auth.uid == userId)
          ||
          // Arkadaşlık isteği: başkası sana istek gönderince
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friendRequests']) &&
            request.auth.uid in request.resource.data.friendRequests)
          ||
          // Arkadaşlık: arkadaş ekleme/çıkarma (her iki taraf da ekleyebilsin/çıkarabilsin)
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
            (request.auth.uid == userId || request.auth.uid in request.resource.data.friends))
        );
    }

    // Sesli arama belgeleri (calls)
    match /calls/{callId} {
      // Sadece aramanın tarafları okuyabilir/yazabilir
      allow read, write: if request.auth != null &&
        (request.auth.uid == resource.data.callerId ||
         request.auth.uid == resource.data.calleeId);
      // Sadece aramanın tarafları oluşturabilir
      allow create: if request.auth != null &&
        (request.auth.uid == request.resource.data.callerId ||
         request.auth.uid == request.resource.data.calleeId);
    }

    // ICE candidates alt koleksiyonu
    match /calls/{callId}/candidates/{candidateId} {
      allow read, write: if request.auth != null &&
        (
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId ||
          request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId
        );
    }

    // Mesaj belgeleri
    match /messages/{messageId} {
      allow get: if request.auth != null &&
                   (request.auth.uid == resource.data.senderId ||
                    request.auth.uid == resource.data.receiverId);
      allow list: if request.auth != null;
      allow create: if request.auth != null &&
                     request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null &&
                     (request.auth.uid == resource.data.senderId ||
                      request.auth.uid == resource.data.receiverId ||
                      request.auth.uid in resource.data.participants) &&
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['isRead', 'deletedFor', 'text', 'edited', 'previousText'])
        );
      allow delete: if request.auth != null &&
                     (request.auth.uid == resource.data.senderId ||
                      request.auth.uid == resource.data.receiverId);
    }

    // Bildirimler (notifications) koleksiyonu
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }
  }
}